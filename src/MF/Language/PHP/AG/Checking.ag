imports
{
import CCO.Component
import MF.Core.Solver (mergeWith)
}

-------------------------------------------------------------------------------
-- Convert the "special" check functions to Expect nodes
-------------------------------------------------------------------------------
    
attr Node ParamList OptionalString MaybeNode ListNode Pairs
    syn annotated :: SELF
    
sem Node
    | FunctionCall
        lhs.annotated = case @name.self of
                            (FunctionName "check")   -> buildExpect @params.self
                            otherwise                -> @self
                           
{

buildExpect params = Expect expr (read $ "fromList" ++ value)
    where
        (Param expr)                     = params !! 0
        (Param (DQContent (Some value))) = params !! 1
        

annotator :: Component Node Node
annotator = component $ return . annotate

annotate = annotated_Syn_Node . execute M.empty M.empty undefined

}


-------------------------------------------------------------------------------
-- Expected constraints
-------------------------------------------------------------------------------

{ 
tyNum = S.fromList [(Scalar TyInt), (Scalar TyFloat)] 
}
    
attr Node
    syn expected use {`S.union`} {S.empty} :: {Set Constraint}

sem Node
    | Expr Return Assign
        loc.expected = @e.expected
    | If While
        loc.expected = S.fromList [(@c.label :==: S.singleton (Scalar TyBool))] `S.union` @c.expected
        lhs.expected = @loc.expected
    | Mod
        +expected    = S.union $ S.fromList [(@l.label :==: S.singleton (Scalar TyInt)), (@r.label :==: S.singleton (Scalar TyInt))]
    | Plus Min Mul
        +expected    = S.union $ S.fromList [(@l.label :==: tyNum), (@r.label :==: tyNum)]
    | Or 
        +expected    = S.union $ S.fromList [(@l.label :==: S.singleton (Scalar TyBool)), (@r.label :==: S.singleton (Scalar TyBool))]
    | IsEqual 
        +expected    = S.union $ S.singleton (@l.label :<=: @r.label)
    | Number
        lhs.expected = S.singleton (@label :==: S.singleton (Scalar TyInt))
    | FloatNumber
        lhs.expected = S.singleton (@label :==: S.singleton (Scalar TyFloat))
    | Expect
        loc.expected = S.singleton (@expr.label :==: @ty) `S.union` @expr.expected

-------------------------------------------------------------------------------
-- Warnings
-------------------------------------------------------------------------------

sem Node
    | Expr Return
        loc.nodes = @e.nodes
    | If While
        loc.nodes = @c.nodes
    | Expect
        loc.nodes = @expr.nodes
    
attr Node
    syn warnings use {`S.union`} {S.empty} :: {Set Warning}

sem Node 
    | FunctionDecl
        lhs.warnings = S.empty
    | Expr If While Expect Return 
        lhs.warnings = S.map (toWarning @self @loc.nodes @loc.constraints) (violatedConstraints  @loc.constraints @loc.expected)
        
        
{            


data Warning = Coercion Node Node TypeSet TypeSet
             | UndefinedVariable Node Node TypeSet
             | UnequalType Node Node Node TypeSet TypeSet
             deriving (Eq, Ord, Show)
             


violatedConstraints :: Set Constraint -> Set Constraint -> Set Constraint
violatedConstraints constraints expected = trace (show expected) $ S.filter isViolations . (fixPoint resolve) $ expected 
    where
        isViolations (l :==: expectedType) | not (resolvedType <: expectedType) = True
                                           | resolvedType == S.empty            = True
                                           | otherwise                          = False
                                                                                where
                                                                                    resolvedType = resolveType constraints l
                                         
        isViolations (l1 :<=: l2)          | resolveType constraints l1 <: resolveType constraints l2 = False
                                           | otherwise                                                = True
        
        
toWarning :: Node -> IntMap Node -> Set Constraint -> Constraint -> Warning
toWarning stmt nodes constraints (l1 :<=: l2)                                    = trace "@@@ Unqualtype" $ UnequalType stmt (lookupNode l1 nodes) (lookupNode l2 nodes) (resolveType constraints l1) (resolveType constraints l2)
toWarning stmt nodes constraints (l :==: expectedType) | resolvedType == S.empty = trace "@@@ Undefined"  $ UndefinedVariable stmt (lookupNode l nodes) expectedType
                                                       | otherwise               = trace "@@@ Coercion"   $ Coercion stmt (lookupNode l nodes) expectedType resolvedType
                                                                                 where
                                                                                     resolvedType = resolveType constraints l

lookupNode l nodes = case IM.lookup l nodes of 
                         Just t  -> t
                         Nothing -> error $ "Failed to lookup node: " ++ show l

-------------------------------------------------------------------------------
-- Checking
-------------------------------------------------------------------------------
     
checker :: Component Node [Warning]
checker = component $ return . check
             
check :: Node -> [Warning]
check p = trace ("mappings: " ++ show mappings) $ concat . L.map S.toList . IM.elems $ mergeWith findWarnings nodes' mappings
    where
        solve = MF.Language.PHP.AG.solve

        -- Maybe it makes more sense to check each context individually, instead of folding
        mappings = IM.map (M.fold join M.empty) undefined -- (solve p)
        nodes' = IM.map toNode (blocks p)
        
        findWarnings node mapping = trace ("finding warnings for " ++ show node ++ " with " ++ show mapping) $ warnings_Syn_Node . execute mapping M.empty undefined $ node

-------------------------------------------------------------------------------
-- Reporting
-------------------------------------------------------------------------------

reporter :: Component [Warning] Doc
reporter = component $ return . report     
             

report :: [Warning] -> Doc
report [] = text "OK" 
report xs = text (show $ length xs) >|< text " warning(s) were found:" >-< above (L.map displayWarning xs)

displayWarning (Coercion stmt node expected resolved) = 
    text "Coercion: " >-< 
        indent 4 (text "Expected: " >|< text (show expected)) >-< 
        indent 4 (text "Found: " >|< text (show resolved)) >-<
    text "In the expression: " >-< 
        indent 4 (pp node) >-<
    text "In the statement: " >-<
        indent 4 (pp stmt)
        
displayWarning (UndefinedVariable stmt node expected) = 
    text "UndefinedVariable: " >-< 
        indent 4 (text "Expected: " >|< text (show expected)) >-<
    text "In the expression: " >-< 
        indent 4 (pp node) >-<
    text "In the statement: " >-<
        indent 4 (pp stmt)

displayWarning (UnequalType stmt left right resolvedLeft resolvedRight) = 
    text "UnequalType: " >-<
        indent 4 (text "Found: " >|< text (show resolvedLeft) >|< text " for " >|< pp left) >-<
        indent 4 (text "Found: " >|< text (show resolvedRight) >|< text " for " >|< pp right) >-<
    text "In the statement: " >-<
        indent 4 (pp stmt)
        
}