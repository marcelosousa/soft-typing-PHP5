imports
{
import Data.IntMap as IM
import CCO.Component

}

-------------------------------------------------------------------------------
-- Simplify the AST
-------------------------------------------------------------------------------

attr Node OptionalString ParamList MaybeNode ListNode Pairs
    syn simplified :: SELF

sem Node
    | DQContent
        lhs.simplified = String @value.value

attr OptionalString
    syn value :: {String}

sem OptionalString
    | Some
        lhs.value = @value
    | None 
        lhs.value = ""
        
-------------------------------------------------------------------------------
-- Remove FunctionCalls 
-------------------------------------------------------------------------------
{
buildSimplifiedFunctionCall :: Node -> Node
buildSimplifiedFunctionCall (Assign rv (FunctionCall (FunctionName name) params)) = SimplifiedFunctionCall name params $ Just rv
buildSimplifiedFunctionCall (FunctionCall (FunctionName name) params)             = SimplifiedFunctionCall name params Nothing
-- buildSimplifiedFunctionCall (Assign rv e)                                         = Assign rv e
buildSimplifiedFunctionCall copy                                                  = Expr copy
}
attr Node OptionalString ParamList MaybeNode ListNode Pairs
    syn removed :: SELF

sem Node 
    | Expr
        lhs.removed = buildSimplifiedFunctionCall @e.self

    | If
        lhs.removed = let nc = buildSimplifiedFunctionCall @c.self
                      in If nc @l.self @elseIfs.self @r.self 
    
    | While
        lhs.removed = let nc = buildSimplifiedFunctionCall @c.self
                      in While nc @s.self
    
    | DoWhile
        lhs.removed = let nc = buildSimplifiedFunctionCall @c.self
                      in DoWhile @s.self nc
                      
    | ElseIf 
        lhs.removed = let nc = buildSimplifiedFunctionCall @c.self
                      in ElseIf nc @s.self
    
    | Ternary
        lhs.removed = let nc = buildSimplifiedFunctionCall @c.self
                      in Ternary nc @t.self @f.self


-------------------------------------------------------------------------------
-- Extract functions
-------------------------------------------------------------------------------

-- Call mapping
attr Node ParamList
    syn callMapping use {`IM.union`} {IM.empty} :: {IntMap Node}

sem Node
    | FunctionCall
        lhs.callMapping = IM.singleton @label @self        


-- Function extraction
attr Node OptionalString ParamList MaybeNode ListNode Pairs
    syn extractFunctions :: SELF

sem Node
    | Expr
        lhs.extractFunctions = extractFunctions (Expr @e.extractFunctions) @e.callMapping
    | Return                     
        lhs.extractFunctions = extractFunctions (Return @e.extractFunctions) @e.callMapping
    | If
        lhs.extractFunctions = extractFunctions (If @c.extractFunctions @l.extractFunctions @elseIfs.extractFunctions @r.extractFunctions) @c.callMapping
    | While                      
        lhs.extractFunctions = extractFunctions (While @c.extractFunctions @s.extractFunctions) @c.callMapping
    | ElseIf                      
        lhs.extractFunctions = extractFunctions (ElseIf @c.extractFunctions @s.extractFunctions) @c.callMapping
    | DoWhile                      
        lhs.extractFunctions = extractFunctions (DoWhile @s.extractFunctions @c.extractFunctions) @c.callMapping
    | SimplifiedFunctionCall     
        lhs.extractFunctions = extractFunctions (SimplifiedFunctionCall @name @params.extractFunctions @result.self) @params.callMapping
    | FunctionCall 
        lhs.extractFunctions = buildVariable @label
    
                       
-------------------------------------------------------------------------------
-- Extract parameters
-------------------------------------------------------------------------------

-- Param mapping
attr Node OptionalString ParamList
    syn paramMapping use {`IM.union`} {IM.empty} :: {IntMap Node}

sem Node
    | Param ParamRef
        lhs.paramMapping = IM.singleton @label @e.self

attr Node OptionalString ParamList MaybeNode ListNode Pairs
    syn extractParameters :: SELF

sem Node
    | SimplifiedFunctionCall
        lhs.extractParameters = extractParameters @self @params.paramMapping
   

{
buildVariable label = Variable $ Simple $ "#" ++ show label 

-- | Generic function to outline a node based on a mapping
-- outline :: (Label -> Node -> Node) -> Node -> IntMap Node -> Node
extract build update node mapping = sequence $ buildSequence ++ [update node mapping]
    where
        buildSequence = IM.elems . IM.mapWithKey build $ mapping
        
-- | Outlines function calls, every function call is moved in front of the expression and replaced by a variable. The function calls itself are placed just before the 
-- | expression
extractFunctions = extract build update
    where
        build label (FunctionCall (FunctionName name) params) = SimplifiedFunctionCall name params $ Just (buildVariable label)
        update = const
        
            
-- | Simplifies a function call        
extractParameters node mapping = extract build update node filtered
    where
        build label expr = Expr $ Assign (buildVariable label) expr
        filtered = IM.filter (not . isVariable) mapping 
        
        isVariable :: Node -> Bool
        isVariable (Variable _) = True
        isVariable n            = False
        
        update (SimplifiedFunctionCall name params result) foo = SimplifiedFunctionCall name (IM.elems . IM.mapWithKey buildParam $ mapping) result
        
        buildParam label expr | isVariable expr = Param expr
                              | otherwise       = Param $ buildVariable label
              
-- | Simplifies Node
simplify node = let a = simplified_Syn_Node . execute M.empty M.empty undefined $ node
                    b = removed_Syn_Node . execute M.empty M.empty undefined $ a
                    c = fixPoint (extractFunctions_Syn_Node . execute M.empty M.empty undefined) $ b
                    d = extractParameters_Syn_Node . execute M.empty M.empty undefined $ c
                in d


simplifier :: Component Node Node
simplifier = component $ return . simplify


}