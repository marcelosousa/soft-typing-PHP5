{
-------------------------------------------------------------------------------
-- Module    :  MF.Language.PHP.AG
-- Copyright :  (c) 2012 Marcelo Sousa, Henk Erik van der Hoek
-- This AG file is part of the module MF.Language.PHP.AG.
-- Declares data Node (AST used in the analysis) 
-- and toTree (ATerm -> Node parser).
-------------------------------------------------------------------------------
}

imports 
{
import CCO.Tree             (ATerm (App), Tree (fromTree, toTree))
import CCO.Tree.Parser      (parseTree, app, arg, ArgumentParser, TreeParser, list)
import Control.Applicative  (Applicative ((<*>)), (<$>), pure)
import Prelude              hiding (sequence)
import Data.Char            (chr)
import MF.Language.PHP.Types
}


-------------------------------------------------------------------------------
-- OptionalString - Helper data for String
-------------------------------------------------------------------------------

data OptionalString
    | Some value :: String
    | None

deriving OptionalString: Show
deriving OptionalString: Eq
deriving OptionalString: Ord

-------------------------------------------------------------------------------
-- Node - Flat AST that represents PHP5 code
-------------------------------------------------------------------------------

type ParamList = [Node]
type ListNode  = [Node]
type Pairs     = [Node]
type MaybeNode = maybe Node
    
data Node
    -- Document - PHP5 script
    | Document 
      before   :: {[Node]} 
      opentag  :: Node 
      stmt     :: Node -- this one is important
      closetag :: Node 
      after    :: {[Node]}
  
    -- Tags
    | OpenTag
    | CloseTag
    
    -- Useful syntactic elements 
    | InlineHTML
    | Literal    value :: String
    | Escape     value :: Int
    
    -- Statements
    | Sequence f :: Node s :: Node    
    | Block    s :: Node
    | Expr     e :: Node
    | Return   e :: Node
    | Skip
    | LBreak
    | LContinue
    | LNone
    
    -- Control Structures
    | Ternary c :: Node t :: Node f :: Node
    | While   c :: Node s :: Node
    | DoWhile s :: Node c :: Node
    | ElseIf  c :: Node s :: Node
    | If 
        c :: Node 
        l :: Node 
        elseIfs :: ListNode 
        r :: Node
       
    -- Assignments    
    | Assign          rv :: Node e :: Node
    | ReferenceAssign rv :: Node v :: Node
    | PlusAssign      rv :: Node e :: Node
    | MinAssign       rv :: Node e :: Node
    | MulAssign       rv :: Node e :: Node
    | DivAssign       rv :: Node e :: Node
    | ModAssign       rv :: Node e :: Node
                     
    | ConcatAssign    rv :: Node e :: Node
    
    | AndAssign       rv :: Node e :: Node
    | OrAssign        rv :: Node e :: Node
    | XorAssign       rv :: Node e :: Node
    | SLAssign        rv :: Node e :: Node
    | SRAssign        rv :: Node e :: Node
    
    -- Types
    -- Null
    | LNull

    -- Booleans
    | LTrue
    | LFalse
    
    -- Integers and Floats
    | Number      value :: Integer
    | FloatNumber value :: Float
  
    -- Strings
    | ConstantEncapsedString n :: Node
    | DQContent              value :: OptionalString
    | String                 value :: String -- The Simplify AG turns every quoted character sequences into a String node 
    
    -- Arrays
    | Array pairs :: Pairs
    | Pair l :: Node r :: Node
   -- | Key e :: Node
   -- | Value e :: Node
    
    -- Arithmetic
    | Plus l :: Node r :: Node
    | Min  l :: Node r :: Node
    | Mul  l :: Node r :: Node
    | Mod  l :: Node r :: Node
    
    -- Decrement and Increment Operators
    | PostInc e :: Node
    | PreInc  e :: Node
    | PostDec e :: Node
    | PreDec  e :: Node
    
    -- Comparison Operators
    | IsEqual        l :: Node r :: Node
    | IsIdentical    l :: Node r :: Node
    | IsNotEqual     l :: Node r :: Node
    | IsNotIdentical l :: Node r :: Node
    | Less           l :: Node r :: Node
    | Greater        l :: Node r :: Node
    | LessEqual      l :: Node r :: Node
    | GreaterEqual   l :: Node r :: Node
    
    -- Logical operators
    | LAnd l :: Node r :: Node
    | LOr  l :: Node r :: Node
    | LXor l :: Node r :: Node
    | Not  e :: Node
    | And  l :: Node r :: Node
    | Or   l :: Node r :: Node    

    -- Concat
    | Concat l :: Node r :: Node
        
    -- Variables
    | Variable n :: Node
    | Simple   value :: String

    -- Reference Variable
    | IndirectReference rv :: Node
    | StringAccess      rv :: Node index :: Node
    | ArrayAccess       rv :: Node index :: Node

    -- Functions
    | FunctionName value :: String
        
    -- FunctionDecl
    | FunctionDecl 
        name   :: String 
        params :: ParamList 
        stmt   :: Node
    
    | FunctionCall 
        name   :: Node 
        params :: ParamList

    -- Introduced by the simplifier: result = name (params)
    | SimplifiedFunctionCall 
        name   :: String 
        params :: ParamList 
        result :: MaybeNode
    
    -- Parameters 
    | Param    e :: Node
    | ParamRef e :: Node
    
    -- Useful functions
    | Echo  e :: Node
    | Print e :: Node
    
    -- Additional: Special node for type check, used for unit testing, not part of the language. Check nodes are generated by the Simplify AG
    | Expect expr :: Node ty :: {TypeSet}
    
deriving Node: Show
deriving Node: Eq
deriving Node: Ord

{
-------------------------------------------------------------------------------
-- Parsers
-------------------------------------------------------------------------------

instance Tree OptionalString where
    fromTree = undefined
    toTree = parseTree [ app "Some" (Some <$> arg), app "None" (pure None)]

instance Tree Node where
    fromTree = undefined    
    toTree = parseTree [ -- Document
                         app "Document"      (buildDocument <$> arg <*> arg <*> arg <*> arg <*> arg)
                       , app "Document"      (buildDocument <$> arg <*> arg <*> arg <*> (pure CloseTag) <*> (pure []))
                       
                         --  Open
                       , app "ShortOpenTag"  (pure OpenTag)
                       , app "FullOpenTag"   (pure OpenTag)
                       , app "ASPOpenTag"    (pure OpenTag)
                       
                         -- Close
                       , app "CloseTag"      (pure CloseTag)
                       , app "ASPCloseTag"   (pure CloseTag)
                       
                         -- InlineHTML
                       , app "InlineHTML"    (buildInlineHtml <$> arg <*> arg <*> arg)
                       , app "Literal"       (Literal <$> arg)
                       , app "Escape"        (Escape <$> arg)
                       
                         -- Statement
                       , app "Expr"          (Expr <$> arg)
                       , app "Block"         (sequence <$> arg)
                       
                       , app "Ternary"       (Ternary <$> arg <*> arg <*> arg)
                       
                       , app "While"         (While <$> arg <*> arg)
                       , app "AltWhile"      (buildAltWhile <$> arg <*> arg)
                       , app "DoWhile"       (DoWhile <$> arg <*> arg)
                       , app "Break"         (buildBreak <$> arg)
                       , app "Continue"      (buildContinue <$> arg)
                       
                       , app "For"           (forToWhile <$> arg <*> arg <*> arg <*> arg)
                       , app "Empty"         (pure Skip)
                                              
                       , app "If"            (If <$> arg <*> arg <*> (pure []) <*> (pure Skip))
                       , app "IfElse"        (If <$> arg <*> arg <*> arg <*> arg)
                       , app "AltIf"         (buildAltIf <$> arg <*> arg <*> arg <*> arg)

                       , app "Return"        (Return <$> arg)
                       
                         -- ElseIfStatement
                       , app "ElseIf"        (ElseIf <$> arg <*> arg)
                       , app "AltElseIf"     (buildAltElseIf <$> arg <*> arg)
                           
                         -- Expression
                       , app "Assign"        (Assign <$> arg <*> arg)
                       , app "ReferenceAssign" (ReferenceAssign <$> arg <*> arg)

                       , app "PlusAssign"    (PlusAssign <$> arg <*> arg)
                       , app "MinAssign"     (MinAssign <$> arg <*> arg)
                       , app "MulAssign"     (MulAssign <$> arg <*> arg)
                       , app "DivAssign"     (DivAssign <$> arg <*> arg)
                       , app "ModAssign"     (ModAssign <$> arg <*> arg)

                       , app "ConcatAssign"  (ConcatAssign <$> arg <*> arg)
                       
                       , app "AndAssign"     (AndAssign <$> arg <*> arg)
                       , app "OrAssign"      (OrAssign  <$> arg <*> arg)
                       , app "XorAssign"     (XorAssign <$> arg <*> arg)
                       , app "SLAssign"      (SLAssign  <$> arg <*> arg)
                       , app "SRAssign"      (SRAssign  <$> arg <*> arg)
                                       
                       , app "True"          (pure LTrue)
                       , app "False"         (pure LFalse)
                       
                       , app "Null"          (pure LNull)
                       
                       , app "Plus"          (Plus <$> arg <*> arg)
                       , app "Min"           (Min <$> arg <*> arg)
                       , app "Mul"           (Mul <$> arg <*> arg)
                       , app "Mod"           (Mod <$> arg <*> arg)                                              
                       
                       , app "PostInc"       (PostInc <$> arg)
                       , app "PreInc"        (PreInc <$> arg)
                       , app "PostDec"       (PostDec <$> arg)
                       , app "PreDec"        (PreDec <$> arg)
                       
                       , app "IsEqual"       (IsEqual       <$> arg <*> arg )
                       , app "IsIdentical"   (IsIdentical   <$> arg <*> arg )
                       , app "IsNotEqual"    (IsNotEqual    <$> arg <*> arg )
                       , app "IsNotIdentical"(IsNotIdentical<$> arg <*> arg )
                       , app "Less"          (Less          <$> arg <*> arg )
                       , app "Greater"       (Greater       <$> arg <*> arg )
                       , app "LessEqual"     (LessEqual     <$> arg <*> arg )
                       , app "GreaterEqual"  (GreaterEqual  <$> arg <*> arg )
                       
                       , app "LAnd"          (LAnd <$> arg <*> arg)
                       , app "LOr"           (LOr  <$> arg <*> arg)
                       , app "LXor"          (LXor <$> arg <*> arg)
                       , app "Not"           (Not  <$> arg)
                       , app "And"           (And  <$> arg <*> arg)
                       , app "Or"            (Or   <$> arg <*> arg)
                       
                       , app "FunctionCall"  (buildFunctionCall <$> arg <*> arg)
                       
                         -- FunctionName 
                       , app "FunctionName"  (FunctionName <$> arg)
                                              
                         -- Strings
                       , app "ConstantEncapsedString" (id <$> arg)
                       , app "DoubleQuoted"  (id <$> arg)
                       , app "SingleQuoted"  (buildSingleQuotedString <$> arg)
                       , app "DQContent"     (DQContent <$> arg)
                       , app "Concat"        (Concat <$> arg <*> arg)
                       , app "StringAccess"  (StringAccess <$> arg <*> arg)
                                              
                         -- ReferenceVariable
                       , app "ArrayAccess"   (ArrayAccess <$> arg <*> arg)
                       
                       , app "Array"         (Array <$> arg)
                       , app "Pair"          (Pair <$> arg <*> arg)
                       , app "Key"           (id <$> arg)
                       , app "Value"         (id <$> arg)
                       
                         -- CompoundVariable
                       , app "Variable"      (Variable <$> arg)
                       , app "IndirectReference" (IndirectReference <$> arg)
                       
                         -- This is the ? in the grammar
                       , app "Some"          (id <$> arg)
                       , app "None"          (pure LNone)
                       
                         -- SimpleVariableName
                       , app "Simple"        (Simple <$> arg)
                       
                       -- LNumber
                       , app "LNumber"       (id <$> arg)
                       , app "Deci"          ((\value -> Number $ read value) <$> arg)
                       , app "Negative"      ((\(Number n) -> Number (-n)) <$> arg)
                       , app "Octa"          ((\value -> Number $ read value) <$> arg)
                       , app "Hexa"          ((\value -> Number $ read value) <$> arg)
                       
                       -- DNumber
                       , app "DNumber"       ((\value -> FloatNumber $ read value) <$> arg)
                       
                       -- FunctionDecl
                       , app "FunctionDecl"  (buildFunctionDecl <$> arg <*> arg <*> arg)

                       -- Params 
                       , app "Param"         (Param <$> arg)
                       , app "ParamRef"      (ParamRef <$> arg)
                       
                       -- Echo
                       , app "Echo"          (buildEcho <$> arg)
                       
                       -- Print
                       , app "Print"         (Print <$> arg)
                       ]

-- Transform a list of Nodes into a Sequence
sequence :: [Node] -> Node
sequence []     = Skip
sequence [x]    = x
sequence xs     = foldr Sequence (last xs) (L.init xs)

-- Transform a list of conditions into a Sequence
-- Useful to transform a for into a while
sequenceConds :: [Node] -> Node
sequenceConds [] = LTrue
sequenceConds xs = sequence xs

-- Same as sequence but wraps each element
-- in an Expr
sequenceExpr :: [Node] -> Node
sequenceExpr [] = Skip
sequenceExpr [x] = Expr x
sequenceExpr xs  = foldr (\l r -> Sequence (Expr l) r) (Expr $ last xs) (L.init xs)  

-- Transforms a for into a while
forToWhile :: [Node] -> [Node] -> [Node] -> Node -> Node
forToWhile initAssign conds postAssign stat = let initAssignNode = sequenceExpr initAssign
                                                  condsNode = sequenceConds conds
                                                  postAssignNode = sequenceExpr postAssign
                                                  whileNode = While condsNode (Sequence postAssignNode stat)
                                              in Sequence initAssignNode whileNode

-- Helper build functions
buildDocument ::  [Node] -> Node -> [Node] -> Node -> [Node] -> Node
buildDocument before opentag stmts = Document before opentag (sequence stmts)

buildAltIf :: Node -> [Node] -> [Node] -> [Node] -> Node
buildAltIf c t e r = If c (sequence t) e (sequence r)

buildAltElseIf :: Node -> [Node] -> Node
buildAltElseIf c e = ElseIf c (sequence e)

buildAltWhile :: Node -> [Node] -> Node
buildAltWhile c e = While c (sequence e)

buildSingleQuotedString :: [Node] -> Node
buildSingleQuotedString = String . buildLiteralString

buildLiteralString :: [Node] -> String
buildLiteralString [] = ""
buildLiteralString ((Literal v):xs) = v ++ buildLiteralString xs
buildLiteralString ((Escape d):xs) = (chr d):buildLiteralString xs

buildBreak :: Node -> Node
buildBreak _ = LBreak

buildContinue :: Node -> Node
buildContinue _ = LContinue

buildInlineHtml :: Node -> [Node] -> Node -> Node
buildInlineHtml _ _ _ = InlineHTML

buildEcho params = Echo (sequence params)

buildFunctionDecl name params stmt = FunctionDecl name params (sequence stmt)
buildFunctionCall name params      = FunctionCall name params -- (sequence params)

-------------------------------------------------------------------------------
-- Parsing
-------------------------------------------------------------------------------

reader :: Component ATerm Node
reader = component toTree

}
