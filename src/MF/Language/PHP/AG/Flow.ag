imports
{
import Data.IntMap as IM
import Data.Map as M
import Data.Maybe
import Control.Applicative

import qualified MF.Core.Flowable as F
import MF.Core.Flowable hiding (Return)
}

-------------------------------------------------------------------------------
-- Labelling & Nodes
-------------------------------------------------------------------------------

attr Node ParamList
    inh labels :: {Label}
    syn labels :: {Label}

    syn label  :: {Label}
  
attr Node ParamList
    syn nodes use {`IM.union`} {IM.empty} :: {IntMap Node}

sem Node
    | OpenTag CloseTag If While Skip Assign Sequence Simple Deci Variable LTrue LFalse Plus Min Mul Mod ArrayAccess Return IsEqual GreaterEqual Or Expect Return FunctionCall Param String Expr DQContent FunctionName Literal Echo Print
        loc.label :: uniqueref labels
        lhs.label = @loc.label
        +nodes    = IM.union $ IM.singleton @label @self
        
    | FunctionDecl
        loc.ln :: uniqueref labels  -- Entry
        loc.lx :: uniqueref labels  -- Exit
        +nodes    = IM.union $ IM.singleton @label @self
        
    | SimplifiedFunctionCall
        loc.lb :: uniqueref labels  -- Before
        loc.lc :: uniqueref labels  -- Call
        loc.lr :: uniqueref labels  -- Return
        loc.la :: uniqueref labels  -- After
        +nodes    = IM.union $ IM.singleton @label @self

sem ParamList
    | Cons Nil
        loc.label :: uniqueref labels
        lhs.label = @loc.label


-------------------------------------------------------------------------------
-- Init
-------------------------------------------------------------------------------
       
attr Node
  syn init use {<|>} {Nothing} :: {Maybe Label}

sem Node
    | Document 
        loc.init = @stmt.init
        lhs.init = @loc.init
    | SimplifiedFunctionCall
        lhs.init = Just @lb
    | If While Skip Expect Return
        lhs.init = Just @label
    | Expr
        lhs.init = @e.init
    | Assign
        lhs.init = @e.init
    | Sequence 
        lhs.init = @f.init <|> @s.init
    | Block
        lhs.init = @s.init
    | FunctionDecl
        lhs.init = Nothing
    | Variable
        lhs.init = Just @label
    
    | Deci
        lhs.init = Just @label
        
        
-------------------------------------------------------------------------------
-- Final
-------------------------------------------------------------------------------

attr Node
  syn final use {<|>} {Nothing} :: {Maybe [Label]}

sem Node
    | Document 
        loc.final = @stmt.final 
        lhs.final = @loc.final
    | SimplifiedFunctionCall
        lhs.final = Just [@la]
    | While Skip Expect Return 
        lhs.final = Just [@label]
    | Expr 
        lhs.final = @e.final
    | Assign
        lhs.final = Just [@label]
    | Variable
        lhs.final = Just [@label]
    | Deci
        lhs.final = Just [@label]
    | Sequence 
        lhs.final = @s.final <|> @f.final
    | If 
        lhs.final = pure (++) <*> @l.final <*> @r.final
    | Block 
        lhs.final = @s.final
    | FunctionDecl
        lhs.final = Nothing
                             
-------------------------------------------------------------------------------
-- Flow
-------------------------------------------------------------------------------

attr Node
  syn flow use {++} {[]} :: {Flow}

sem Node
    | Sequence 
        +flow = (++) @loc.flow
        loc.flow = if isNothing @s.init || isNothing @f.final then [] else [(l, fromJust @s.init) | l <- fromJust @f.final]
    | If 
        +flow = (++) $ [(@label, fromJust @l.init), (@label, fromJust @r.init)]
    | While 
        +flow = (++) $ [(@label, fromJust @s.init)] ++ [(l', @label) | l' <- fromJust @s.final]
    | Return
        +flow = (++) $ [(@label, lx @lhs.declaration)]
    | FunctionDecl
        +flow = (++) $ [(@ln, fromJust @stmt.init)]
    | SimplifiedFunctionCall
        +flow = let (Declaration name ln lx) = lookupDeclaration @name @lhs.declarations'
                in (++) [(@lb, @la), (@lb, @lc), (@lr, @la), (@lc, ln), (lx, @lr)]
    | Assign
        +flow = (++) @loc.flow  
        loc.flow = [(l', fromJust @rv.init) | l' <- fromJust @e.final] ++ [(l', @label) | l' <- fromJust @rv.final]

{
lookupDeclaration name declarations = case M.lookup name declarations of 
                                          Nothing   -> error $ "Calling an undefined function: " ++ name
                                          Just info -> info
}

-------------------------------------------------------------------------------
-- Function Declarations
-------------------------------------------------------------------------------

{
data Declaration = Declaration { functionName :: String, ln :: Label, lx :: Label }
}

attr Node ParamList
    syn declarations use {`M.union`} {M.empty} :: {Map String Declaration}
    inh declarations'                          :: {Map String Declaration}
    
    inh declaration :: {Declaration}
    
sem Node
    | Document
        stmt.declarations' = @stmt.declarations
    | FunctionDecl
        loc.declaration = Declaration @name @ln @lx
        stmt.declaration = @loc.declaration
        +declarations   = M.union $ M.singleton @name @loc.declaration

-------------------------------------------------------------------------------
-- Blocks
-------------------------------------------------------------------------------
        
attr Node
    syn blocks use {`IM.union`} {IM.empty} :: {IntMap (Block Node)}

sem Node
    | Skip Expect Expr While If Return
        +blocks = IM.union $ IM.singleton @label $ Normal @self
    | SimplifiedFunctionCall
        +blocks = IM.union $ IM.fromList [(@lb, Normal Skip)
                                 ,(@lc, Call @lc @lr @self)
                                 ,(@lr, F.Return @lc @lr @self)
                                 ,(@la, Normal Skip)]
    | FunctionDecl 
        +blocks = IM.union $ IM.fromList [(@ln, Entry @self)
                                 ,(@lx, Exit @self)]

{
nextUnique :: Int -> (Int, Int)
nextUnique u = (u+1, u)

-- Make Node an instance of Flowable, in this way it can be consumed by a monotone framework
instance Flowable Node where
    init     = fromJust . init_Syn_Node . execute M.empty
    final    = fromJust . final_Syn_Node . execute M.empty
    flow     = flow_Syn_Node . execute M.empty
    blocks   = blocks_Syn_Node . execute M.empty

debugflow n = "Doc: " ++ (show n) ++ 
              "\nInit: " ++ (show . F.init $ n) ++ 
              "\nFinal: " ++ (show . F.final $ n) ++ 
              "\nBlocks: " ++ (show . F.blocks $ n) ++
              "\nFlow: " ++ (show . F.flow $ n) ++ 
              "\nLabels: " ++ (show . F.labels $ n) ++
              "\nNodes: " ++ (show . nodes_Syn_Node . execute M.empty $ n)
}