{
-------------------------------------------------------------------------------
-- Module    :  MF.Language.PHP.AG
-- Copyright :  (c) 2012 Marcelo Sousa, Henk Erik van der Hoek
-- This AG file is part of the module MF.Language.PHP.AG.
-- Pretty Printer for control flow graph
-- Since the Node is a flat structure it's not easy to generate a 
-- dot file with the DOT package.
-------------------------------------------------------------------------------
}

imports
{
import CCO.Printing as P hiding (render, join) 
import Data.IntMap as IM
import Data.Map as M
import Data.Set as S
import qualified Debug.Trace as TR
}

-------------------------------------------------------------------------------
-- Pretty Printer for Control Flow Graph
-------------------------------------------------------------------------------

attr Node MaybeNode ListNode Pairs ParamList
    syn ppcfg use {>|<} {P.empty} :: {Doc}
    syn labstruct use {`IM.union`} {IM.empty} :: {IntMap String}

    inh struct :: String
    inh res :: {ValueMap (Identifier :-> TypeSet)}

sem MaybeNode
    | Just lhs.ppcfg = @just.ppcfg
    | Nothing lhs.ppcfg = P.empty
    
sem Node
    | Document 
        lhs.ppcfg = text "digraph structs {" >-< 
                    text "bgcolor=transparent;" >-<
                    text "node [shape=Mrecord];" >-<
                    text "init [label=\"init\", shape=circle]" >-<
                    text "final [label=\"final\", shape=circle, style=filled, fillcolor=gray]" >-<
                    @stmt.ppcfg >-<
                    @loc.flowp >-<                    
                    text "}"
        loc.flowp = text "init -> " >|< text (buildLabelRef @stmt.labstruct (fromJust @init)) >|< text ";" >-<
                    above [text (buildLabelRef @stmt.labstruct f) >|< text "-> final;" | f <- fromJust @final] >-<
                    ppConns @stmt.flow @stmt.labstruct

    -- Sequence (lists in the grammar are converted to a sequence by Base.ag) 
    | Sequence 
        lhs.ppcfg = @f.ppcfg >-< @s.ppcfg

        --FunctionDecl name :: String params :: ParamList stmt :: Node
    | FunctionDecl -- missing the params
        lhs.ppcfg = text ("subgraph cluster_"++(show @label)++" {") >-<
                    text "style=filled;" >-<
                    text "color=lightblue;" >-<
                    text (show @loc.ln) >|< text " [label=\"entry" >|< dotAnnotate @loc.ln >|< text "\", shape=circle]" >-<
                    text (show @loc.lx) >|< text " [label=\"exit" >|< dotAnnotate @loc.lx >|< text "\", shape=circle, style=filled, fillcolor=gray]" >-<
                    @stmt.ppcfg >-<
                    text "label = \"function " >|< text @name >|< text "\"; }"
        loc.sname = "fun"++show @label
        lhs.labstruct = @stmt.labstruct
        stmt.res  = @lhs.res

    -- Introduced by the simplifier: result = name (params)
    -- At the moment parameters are not being pretty printed.
    | SimplifiedFunctionCall
        lhs.ppcfg = text ("subgraph cluster_"++(show @loc.lc)++" {") >-<
                    text "color=green;" >-<
                    text (show @loc.lc) >|< text " [label=\"call " >|< text @name >|< dotAnnotate @loc.lc >|< 
                    ppMapping (@loc.lattice @loc.lc) >|<
                    text " \"]" >-<
                    text (show @loc.la) >|< text " [label=\"$" >|< text (resfromJust @result.self) >|< text " after " >|< dotAnnotate @loc.la >|<
                    ppMapping (@loc.lattice @loc.la) >|< text "\"]" >-<
                    text (show @loc.lr) >|< text " [label=\"return " >|< text @name >|< dotAnnotate @loc.lr >|<
                    ppMapping (@loc.lattice @loc.lr) >|< 
                    text "\", style=filled, fillcolor=gray]" >-<
                    text (show @loc.lb) >|< text " [label=\"$" >|< text (resfromJust @result.self) >|< text " before " >|< dotAnnotate @loc.lb >|< 
                    ppMapping (@loc.lattice @loc.lb) >|< text "\"]" >-<
                    text "label = \"call " >|< text @name >|< text "\"; }"
--                    @params.ppcfg >-<
        result.struct = @loc.sname
        loc.sname = "res" ++ show @loc.lr
        loc.lattice = \l -> fromMaybe M.empty $ IM.lookup l @lhs.res        

    -- Variables
    | Variable 
        lhs.ppcfg = dotPort @label >|< 
                    text "$" >|< @n.ppcfg >|< 
                    dotAnnotate @label >|<
                    ppMapping @loc.lattice
        +labstruct  = IM.union $ IM.singleton @label @lhs.struct
        loc.lattice = fromMaybe M.empty $ IM.lookup @label @lhs.res

    | IndirectReference 
        lhs.ppcfg = dotPort @label >|< 
                    text "IRef" >|<  
                    dotAnnotate @label >|< 
                    ppMapping @loc.lattice >|< text " | " >|< @rv.ppcfg
        +labstruct  = IM.union $ IM.singleton @label @lhs.struct
        loc.lattice = fromMaybe M.empty $ IM.lookup @label @lhs.res
            
    | Expr
        lhs.ppcfg = text @loc.sname >|< dotLabel @e.ppcfg
        e.struct = @loc.sname
        loc.sname = "expr" ++ show @label

    | Echo
        lhs.ppcfg = text @loc.sname >|< dotLabel ( 
                    dotPort @label >|< text "Echo " >|< 
                    dotAnnotate @label >|<
                    text " | " >|< @e.ppcfg)
        e.struct = @loc.sname
        loc.sname = "echo" ++ show @label
        +labstruct = IM.union $ @e.labstruct `IM.union` (IM.singleton @label @loc.sname)
        
    | Print
        lhs.ppcfg = dotPort @label >|< text "Print " >|< 
                    dotAnnotate @label >|<
                    text " | " >|< @e.ppcfg
        +labstruct = IM.union $ (IM.singleton @label @lhs.struct)

    | PostInc PostDec
        lhs.ppcfg = @e.ppcfg >|< text "|" >|< dotPort @label >|< text (toString @self) >|< dotAnnotate @label >|< ppMapping @loc.lattice
        loc.lattice = myfromJust $ IM.lookup @label @lhs.res
        +labstruct  = IM.union $ IM.singleton @label @lhs.struct

    | PreInc PreDec
        lhs.ppcfg = dotPort @label >|< text (toString @self) >|< dotAnnotate @label >|< ppMapping @loc.lattice >|< text " | " >|< @e.ppcfg
        loc.lattice = myfromJust $ IM.lookup @label @lhs.res
        +labstruct  = IM.union $ IM.singleton @label @lhs.struct

    | Plus Min Mul Mod IsEqual IsIdentical IsNotEqual IsNotIdentical Less Greater LessEqual GreaterEqual LAnd LOr LXor And Or Concat
        lhs.ppcfg = @l.ppcfg >|< text "|" >|< dotPort @label >|< text (toString @self) >|< 
                    dotAnnotate @label >|< ppMapping @loc.lattice >|< text " | " >|< @r.ppcfg
        loc.lattice = myfromJust $ IM.lookup @label @lhs.res
        +labstruct  = IM.union $ IM.singleton @label @lhs.struct

    | Not
        lhs.ppcfg = dotPort @label >|< text (toString @self) >|< 
                    dotAnnotate @label >|< ppMapping @loc.lattice >|< text " | " >|< @e.ppcfg
        loc.lattice = myfromJust $ IM.lookup @label @lhs.res
        +labstruct  = IM.union $ IM.singleton @label @lhs.struct
    
    | Return
        lhs.ppcfg = text @loc.sname >|< 
                    dotLabel (dotPort @label >|< text "return" >|< dotAnnotate @label >|< ppMapping @loc.lattice >|< text " | " >|< @e.ppcfg)
        e.struct = @loc.sname
        loc.sname = "expr" ++ show @label
        loc.lattice = myfromJust $ IM.lookup @label @lhs.res
        +labstruct = IM.union $ @e.labstruct `IM.union` (IM.singleton @label @loc.sname)

    | If
        lhs.ppcfg = 
                    text ("subgraph cluster_"++(show @label)++" {") >-<
                    text "color=lightgrey;" >-<
                    @loc.ppcfg >-<
                    text "label = \"if #" >|< text (show @label) >|< text "\"; }"
        c.struct = "cond" ++ show @label
        loc.ppcfg = case @c.self of
                        (SimplifiedFunctionCall _ _ _) -> @c.ppcfg  >|< @l.ppcfg >|< @elseIfs.ppcfg >-< @r.ppcfg
                        (Expr _)                       -> @c.ppcfg  >|< @l.ppcfg >|< @elseIfs.ppcfg >-< @r.ppcfg
                        _                              -> text ("cond" ++ show @label) >|< dotLabel @c.ppcfg >|< @l.ppcfg >|< @elseIfs.ppcfg >-< @r.ppcfg
    
    | ElseIf
        lhs.ppcfg = text ("subgraph cluster_"++(show @label)++" {") >-<
                    text "color=lightblue;" >-<
                    @loc.ppcfg >-<
                    text "label = \"elseif #" >|< text (show @label) >|< text "\"; }"
        c.struct = "cond" ++ show @label
        loc.ppcfg = case @c.self of
                        (SimplifiedFunctionCall _ _ _) -> @c.ppcfg  >|< @s.ppcfg
                        (Expr _)                       -> @c.ppcfg  >|< @s.ppcfg
                        _ -> text ("cond" ++ show @label) >|< dotLabel @c.ppcfg  >|< @s.ppcfg

    | While
        lhs.ppcfg = text ("subgraph cluster_"++(show @label)++" {") >-<
                    text "color=lightgrey;" >-<
                    @loc.ppcfg >-< 
                    text "label = \"while #" >|< text (show @label) >|< text "\"; }"
        c.struct = "cond" ++ show @label
        loc.ppcfg = case @c.self of
                        (SimplifiedFunctionCall _ _ _) -> @c.ppcfg  >|< @s.ppcfg
                        (Expr _)                       -> @c.ppcfg  >|< @s.ppcfg
                        _ -> text ("cond" ++ show @label) >|< dotLabel @c.ppcfg  >|< @s.ppcfg

    | DoWhile
        lhs.ppcfg = text ("subgraph cluster_"++(show @label)++" {") >-<
                    text "color=lightgrey;" >-<
                    @loc.ppcfg >-< 
                    text "label = \"dowhile #" >|< text (show @label) >|< text "\"; }"
        c.struct = "cond" ++ show @label
        loc.ppcfg = case @c.self of
                        (SimplifiedFunctionCall _ _ _) -> @s.ppcfg >|< @c.ppcfg
                        (Expr _)                       -> @s.ppcfg >|< @c.ppcfg
                        _ -> text ("cond" ++ show @label) >|< @s.ppcfg >|< dotLabel @c.ppcfg

    | Simple
        lhs.ppcfg = text @value
        
    | Assign PlusAssign MinAssign MulAssign DivAssign ModAssign ConcatAssign AndAssign OrAssign XorAssign SLAssign SRAssign 
        lhs.ppcfg = @rv.ppcfg >|< 
                    text " | " >|< dotPort @label >|< text (toString @self) >|< 
                    dotAnnotate @label >|<
                    ppMapping @loc.lattice >|< text " | " >|< 
                    @e.ppcfg
        loc.lattice = myfromJust $ IM.lookup @label @lhs.res
        +labstruct = IM.union $ @rv.labstruct `IM.union` @e.labstruct `IM.union` (IM.singleton @label @lhs.struct)
    
    | ReferenceAssign
        lhs.ppcfg = @rv.ppcfg >|< 
                    text " | " >|< dotPort @label >|< text (toString @self) >|< 
                    dotAnnotate @label >|<
                    ppMapping @loc.lattice >|< text " | " >|< 
                    @v.ppcfg
        loc.lattice = myfromJust $ IM.lookup @label @lhs.res
        +labstruct = IM.union $ @rv.labstruct `IM.union` @v.labstruct `IM.union` (IM.singleton @label @lhs.struct)
        
    | LTrue LFalse LNull Number FloatNumber
      lhs.ppcfg = dotPort @label >|< 
                  text (toString @self) >|< 
                  dotAnnotate @label    
      +labstruct = IM.union $ IM.singleton @label @lhs.struct      
    
    | String
        lhs.ppcfg = dotPort @label >|< ppString @value >|< dotAnnotate @label
        +labstruct = IM.union $ IM.singleton @label @lhs.struct
            
    | Skip LBreak LContinue
        lhs.ppcfg = text @loc.labtag >|< dotLabel (dotPort @label >|< text (toString @self) >|< dotAnnotate @label)
        +labstruct = IM.union $ IM.singleton @label @loc.labtag
        loc.labtag = (toString @self) ++ show @label
    
    | Pair
        lhs.ppcfg = text " | " >|< dotPort @label >|< text "Pair" >|< dotAnnotate @label >|< text " | " >|< @l.ppcfg >|< text " | " >|< @r.ppcfg
        +labstruct = IM.union $ IM.singleton @label @lhs.struct
        
    | Array
        lhs.ppcfg = dotPort @label >|< text "Array" >|< dotAnnotate @label >|< text " | " >|< @pairs.ppcfg 
        +labstruct = IM.union $ IM.singleton @label @lhs.struct
        
    | LNone
        lhs.ppcfg = dotPort @label >|< text "LNone" >|< dotAnnotate @label
        +labstruct = IM.union $ IM.singleton @label @lhs.struct
            
    | Ternary
        lhs.ppcfg = @c.ppcfg >|< text " | " >|< @t.ppcfg >|< text " | " >|< @f.ppcfg
        
    | ArrayAccess
        lhs.ppcfg = dotPort @label >|< text "ArrayAccess" >|< text " | " >|< 
                    @rv.ppcfg >|< text " | " >|< @index.ppcfg 
        +labstruct = IM.union $ IM.singleton @label @lhs.struct      

    | StringAccess
        lhs.ppcfg = dotPort @label >|< text "StringAccess" >|< text " | " >|< 
                    @rv.ppcfg >|< text " | " >|< @index.ppcfg 
        +labstruct = IM.union $ IM.singleton @label @lhs.struct      
    

{
-- Helper Functions for Pretty Printing
toString :: Node -> String
toString LTrue            = "true"
toString LFalse           = "false"

toString LNull            = "null"
toString LContinue        = "continue"
toString LBreak           = "break"
toString Skip             = "skip"

toString (Assign _ _)     = "="
toString (ReferenceAssign _ _) = "= &"
toString (PlusAssign _ _) = "+="
toString (MinAssign _ _)  = "-="
toString (MulAssign _ _)  = "*=" 
toString (DivAssign _ _)  = "/="
toString (ModAssign _ _)  = "%="
toString (ConcatAssign _ _) = ".="
toString (AndAssign  _ _) = "&="
toString (OrAssign   _ _) = "\\|="
toString (XorAssign  _ _) = "^="
toString (SLAssign   _ _) = "\\<\\<="
toString (SRAssign   _ _) = "\\>\\>="

toString (Plus _ _    )   = "+"
toString (Min _ _     )   = "-"
toString (Mul _ _     )   = "*"
toString (Mod _ _     )   = "%"

toString (LAnd _ _) = "And"
toString (LOr  _ _) = "Or"
toString (LXor _ _) = "Xor"
toString (Not  _  ) = "!"
toString (And  _ _) = "&&"
toString (Or _ _ )  = "||"

toString (Number v)  = show v
toString (FloatNumber v) = show v

toString (IsEqual        _ _) = "==" 
toString (IsIdentical    _ _) = "==="
toString (IsNotEqual     _ _) = "!="
toString (IsNotIdentical _ _) = "!==="
toString (Less           _ _) = "\\<"
toString (Greater        _ _) = "\\>"
toString (LessEqual      _ _) = "\\<="
toString (GreaterEqual   _ _) = "\\>="

toString (PreInc _) = "PreInc"
toString (PreDec _) = "PreDec"
toString (PostInc _) = "PostInc"
toString (PostDec _) = "PostDec"
toString (Concat _ _) = "Concat"

dotAnnotate :: Show a => a -> Doc
dotAnnotate a = text " (" >|< text (show a) >|< text ") "

dotLabel :: Doc -> Doc
dotLabel d = text " [label=\"" >|< d >|< text "\"];"

dotPort :: Show a => a -> Doc
dotPort a = angles $ text (show a) 

sChar :: Doc
sChar = text "\\\""

ppString :: String -> Doc
ppString s = enclose sChar sChar (text s)

ppConns :: Flow -> IntMap String -> Doc
ppConns flow structags = above $ L.map (\f -> ppConn f structags) flow

ppConn :: (Label, Label) -> IntMap String -> Doc
ppConn (l,l') labeltags = text (buildLabelRef labeltags l) >|< text "-> " >|< text (buildLabelRef labeltags l') >|< text ";"

ppMapping :: Mapping -> Doc
ppMapping m = foldr (\d r -> if P.isEmpty r then d else d >|< comma >|< r) P.empty (L.map ppMappingElem (M.toList m))
    where ppMappingElem (id, tys) = text "\\n ( " >|< ppIdentifier id >|< text "\\=\\>" >|< ppTypeSet tys >|< text ")" 

ppIdentifier :: Identifier -> Doc
ppIdentifier (Identifier s) = text "$" >|< text s
ppIdentifier (Parameter (i,x,y,b))  = text "Param " >|< 
                                      text ("(" ++ (show i) ++ ",") >|< ppString x >|< 
                                      text "," >|< ppString y >|< 
                                      text "," >|< text (show b ++ ")")
ppIdentifier (ReturnValue)  = text "ReturnValue"

ppTypeSet :: TypeSet -> Doc
ppTypeSet tys = text "\\{ " >|< foldr (\d r -> if P.isEmpty r then d else d >|< comma >|< r) P.empty (L.map ppType (S.elems tys)) >|< text "\\}"
    where ppType (TyRef (i, ty)) = text "TyRef (" >|< ppIdentifier i >|< text ", " >|< ppType ty >|< text ")"
          ppType x               = text $ show x

-- name is defined in Typing.ag
resfromJust :: Maybe Node -> String
resfromJust Nothing = ""
resfromJust (Just a) = name a M.empty

buildLabelRef :: IntMap String -> Label -> String
buildLabelRef imap l = case IM.lookup l imap of
                            Just s -> s ++ ":" ++ (show l)
                            Nothing -> show l -- error $ show imap ++ show l


-------------------------------------------------------------------------------
-- Visualizer Control Flow Graph
-------------------------------------------------------------------------------

debuggerCFG :: Component (IM.IntMap (String, FlowOut)) String
debuggerCFG = component $ return . IM.fold ((++) . fst) ""

visualizerCFG :: Component Node (IM.IntMap (String, FlowOut))
visualizerCFG = component $ return . cfgprint
             
cfgprint n = IM.map (\(it, w) -> (render_ 80 (ppcfg_Syn_Node $ execute M.empty M.empty it n), w)) (typing n)


--ppcfg_Syn_Node $ execute M.empty (last $ IM.elems $ typing n) n

}      
