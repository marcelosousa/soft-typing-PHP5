{
-------------------------------------------------------------------------------
-- Module    :  MF.Language.PHP.AG
-- Copyright :  (c) 2012 Marcelo Sousa, Henk Erik van der Hoek
-- This AG file is part of the module MF.Language.PHP.AG.
-- Pretty printer for input code.

-- NOTE: This file is not synchronized with the current version of the project.
-------------------------------------------------------------------------------
}

imports
{
import CCO.Printing as P hiding (render, join) 
}


-------------------------------------------------------------------------------
-- Pretty printer for input code
-------------------------------------------------------------------------------

attr Node ParamList OptionalString
    syn pp use {>|<} {P.empty}:: {Doc}
    
sem OptionalString
    | Some
        lhs.pp = text "\"" >|< text @value >|< text "\""
    | None
        lhs.pp = text "\"\""
    
sem ParamList
    | Cons 
        lhs.pp = @hd.pp >|< text "," >|< @tl.pp
    | Nil
        lhs.pp = P.empty
    
sem Node
    | Document 
        lhs.pp = text "<?" >-< @stmt.pp >-< text "?>"

    -- Sequence (lists in the grammar are converted to a sequence by Base.ag) 
    | Sequence 
        lhs.pp = @f.pp >|< text ";" >-< @s.pp                   
    | Skip
        lhs.pp = P.empty

    -- Statements
    | If 
        lhs.pp = text "if (" >|< @c.pp >|< text ") {" >-< indent 4 @l.pp >-< text "} else {" >-< indent 4 @r.pp >-< text "}"
    | While
        lhs.pp = text "while (" >|< @c.pp >|< text ") {" >-< indent 4 @s.pp >-< text "}"
    | Return
        lhs.pp = text "return " >|< @e.pp
    | SimplifiedFunctionCall
        lhs.pp = case @result.self of 
                    Just v  -> pp v >|< text " := " >|< text @name >|< text "(" >|< @params.pp >|< text ")"
                    Nothing -> text ":: " >|< text @name >|< text "(" >|< @params.pp >|< text ")"
        
    -- Variables
    | Variable 
        lhs.pp = text "$" >|< @n.pp        
    | ArrayAccess
        lhs.pp = @rv.pp >|< text "[" >|< @index.pp >|< text "]"
    | Simple
        lhs.pp = text @value

    -- Expressions
    | String
        lhs.pp = text "\"" >|< text @value >|< text "\""
    | Assign
        lhs.pp = @rv.pp >|< text " = " >|< @e.pp
    -- Arithmetic
    | Number FloatNumber
        lhs.pp = text $ show @value
    | Plus 
        lhs.pp = @l.pp >|< text " + " >|< @r.pp
    | Min 
        lhs.pp = @l.pp >|< text " - " >|< @r.pp
    | Mul
        lhs.pp = @l.pp >|< text " * " >|< @r.pp
    | Mod 
        lhs.pp = @l.pp >|< text " % " >|< @r.pp
    -- Compare
    | IsEqual
        lhs.pp = @l.pp >|< text " == " >|< @r.pp        
    | GreaterEqual
        lhs.pp = @l.pp >|< text " >= " >|< @r.pp        
    -- Logical
    | LTrue
        lhs.pp = text "true"
    | LFalse 
        lhs.pp = text "false"
    | LNull
        lhs.pp = text "NULL"
    | Or
        lhs.pp = @l.pp >|< text " || " >|< @r.pp
        
        
    -- | String
    | ConstantEncapsedString
        lhs.pp = @n.pp

    
    | DQContent
        lhs.pp = @value.pp
                
    -- | Function call before simplification
    | FunctionCall 
        lhs.pp = @name.pp >|< text "()"
    | FunctionName
        lhs.pp = text @value
        
        
    -- Functions
    | FunctionDecl
        lhs.pp = text "function " >|< text @name >|< text "() {" >-< indent 4 @stmt.pp >-< text "}" 
    | Param
        lhs.pp = @e.pp
    
        
    -- Debugging & Unit testing
    | Expect
        lhs.pp = text "## Expect: " >|< @expr.pp >|< text " == " >|< text (show @ty)
        
    -- Echo
    | Echo
        lhs.pp = text "echo " >|< @e.pp
    
    -- Print
    | Print
        lhs.pp = text "print " >|< @e.pp

{
-------------------------------------------------------------------------------
-- Printer
-------------------------------------------------------------------------------

render :: Doc -> String
render = render_ 1000 

instance Printable Node where
    pp = pp_Syn_Node . execute M.empty M.empty undefined

}      
