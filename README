Soft-typing for PHP5
=====================
:language: bash

NOTE: Look for the README.html file in the same folder, it contains a more
      readable variant of this text file.

Author
-------
Henk Erik van der Hoek (Initial Project (https://github.com/henkerik/typing))
Marcelo Sousa <dipython@gmail.com> (MSc. Computing Science student Utrecht Universiteit)

NOTE: Building the HTML version of this document requires `asciidoc` with either
      pygments or gnu source highlight. asciidoc can be easily installed from 
      source.

Introduction
------------
This Experimentation Project is related to my MSc. Computing Science 
at the University of Utrecht from October 2011 and it's based on previous work of
Henk Erik van der Hoek (https://github.com/henkerik/typing). 
The goal of the project continues to be static type inference of variables in 
PHP programs to provide suitable warnings whenever a program is likely to be incorrect. 

Installing
----------
All of these can be installed using cabal. The code itself can
be compiled with the command:

[source]
----
cabal configure && cabal build.
----

or simply:

[source]
----
make
----

Running
-------
To analyze the file input.php use:

[source]
----
./run
----

To run the testsuite type:

[source]
----
typing_tester
----

The analysis
------------
The goal of the analysis is to find for each program-point in the program which
variables are in scope and what their possible types are at that point.
Following the initial approach by Henk Erik this was realized by specifying the 
problem as a monotone framework instance for a forward analysis and by solving the instance using a iterative work-list algorithm. 
The theory behind monotone frameworks is described in Principles of Program Analysis by Nielson, Nielson & Hankin (NNH). 
During the execution of each transfer function constraints for the PHP expression at hand are generated, 
and the type of an expression is found by resolving these constraints. This idea was described 
by Camphuijsen in his thesis "Soft typing and analyses on PHP programs".


General Architecture 
--------------------
(heavily based on Henk Erik's work)

At the moment the code base is clearly separated between the monotone framework and a generic work-list algorithm
on one side and the framework instances on the other side. Beside soft typing, several other analyses were
implemented as well (*). This was done to get the boundary between framework and instances clear. 
These additional analyses all operate on the While language, a small imperative language defined by NNH. 

The soft typing analyses contains two distinct phases. In the first phase an instance of the monotone
framework is specified and solved. The result is a mapping between variable and type for any given 
program point. In the second phase this result is used to check wether these types match the types 
we expect. The second process doesn't specify or solve a monotone framework instance and could be 
considered a post processing step. 

The following files and directories might be of special interest:
----

| File or directory                      | Description                                                           |
|:---------------------------------------|:----------------------------------------------------------------------|
| src/grammar                            | sglri php5 definitions (do not change)                                |
| src/MF/Core.hs                         | Implements the work-list algorithm (look for the 'solve' function)    |
| src/MF/Languages/PHP/AG/Flow.ag        | Implements the conversion of an AST to a flow graph                   |
| src/MF/Languages/PHP/AG/Typing.ag      | Implements the constraint generation, the transfer function and       |
|                                        | specifies an instance of the monotone framework                       |
| src/MF/Languages/PHP/AG/Checking.ag    | Implements the expected constraint generation and generates warnings  |
|                                        | when the expected constraints don't match the types found by running  |
|                                        | the work-list algorithm.	                                             |


(*) : Currently these analyses additional analyses don't compile due to recent changes in the Flowable class

Done
~~~~
1. Comments in the sense that they are removed by sglri (tests/syntax/comment.php)
2. Simple assignments (tests/simple.php) -- Should we add contexts?
3. If-constructs with no else clauses (tests/controlstruct/if.php)
4. Ifelse constructs (tests/controlstruct/ifelse.php)
5. Double quoted strings (tests/basicdatatypes/scalar/string/doublequoted.php)
6. Strings with escapes characters (tests/basicdatatypes/scalar/string/doublequoted.php)
7. Simple interprocedural analysis (tests/functions/id.php, tests/functions/id2.php)
8. While-construct (tests/controlstruct/while.php)
9. Booleans (tests/basicdatatypes/scalar/boolean/boolean.php)
10. User-defined functions without parameters (tests/functions/simple.php)
11. Return statement (tests/functions/simple.php)
12. Recursive functions (tests/functions/fac.php, tests/functions/recursive.php)
13. Print function (tests/print.php)
14. Echo function (tests/echo.php) - Missing case when echo receives something that not a string as input.
15. Incrementing/Decrementing Operators (tests/preposincrement.php tests/preposdecrement.php)
16. Assignment operators (Arithmetic, String and Bitwise) (tests/assignop.php)
17. Comparison Operators (tests/basicdatatypes/scalar/boolean/boolop.php)
18. Logical Operators (tests/basicdatatypes/scalar/boolean/logicop.php)
19. Supports HTML Embedding (tests/syntax/htmlembedding.php)
20. InlineHTML implemented (tests/syntax/advancedescaping.php)
21. Standard tags (tests/syntax/phptagsimple.php)
22. ASP tags (tests/syntax/phptagasp.php)
23. "In PHP 5.2 and earlier, the parser does not allow the <?php opening tag to be the only thing in a file. This is allowed as of PHP 5.3." (tests/syntax/phptagstandard.php)
24. Circular functions (tests/functions/recursive2.php)
25. Else-if (tests/controlstruct/elseif.php)
26. AltIf, AltIfElse (tests/controlstruct/ifelsealt.php)
27. AltWhile (tests/controlstruct/while3.php)
28. Ternary conditional operator (tests/ternaryconditionalop.php)
29. Creating/modifying with square bracket syntax 
30. ReferenceAssign (tests/variables/varreference.php)
31. IndirectReference (tests/variables/indirectrefvar.php)
32. ParameterReference (tests/assign.php)
33. SingleQuoted strings (tests/basicsdatatypes/scalar/string/singlequoted.php)
34. Negative integers not implemented (tests/basicdatatypes/scalar/integer/integerliteral.php)
35. Octal integers not implemented (tests/basicdatatypes/scalar/integer/integerliteral.php)
36. Hexa integers not implemented (tests/basicdatatypes/scalar/integer/integerliteral.php)
37. Floating-point types (tests/basicdatatypes/scalar/float/*)
38. NULL type (tests/basicdatatypes/null.php)
39. StringAccess (tests/basicdatatypes/scalar/string/stringindex.php)
40. None (tests/basicdatatypes/compound/array/arraycreation3.php)
41. Standard array creation (tests/basicdatatypes/compound/array/arraycreation*.php) (check nesting)
42. Assignments in conditions (tests/controlstruct/conditional.php)
43. DoWhile (tests/controlstruct/dowhile.php, tests/controlstruct/dowhilebreak.php)
44. Break for while and dowhile (tests/controlstruct/whilebreak.php)
45. Continue (tests/controlstruct/whilecontinue.php)
46. For (tests/controlstruct/for.php)
47. function with array as parameter (tests/functions/funtakesarray.php)
48. function within a function (tests/functions/funfun.php)

Non-Supported PHP5 features
---------------------------

Parser 
~~~~~~
1. sglri does not allow combination of different sytles of open-close tags (tests/syntax/phptagcombination.php)
2. sglri seems to now allow lambdas                                        (tests/basicsdatatypes/callback/callbackclosure.php, tests/functions/lambda.php)
3. sglri does not support Goto                                             (tests/controlstruct/goto.php)

Various
~~~~~~~
1. TemplateDocument                           (tests/syntax/phptagecho.php, tests/syntax/phptagscript.php)
2. Different code snippets in the same file   (tests/syntax/instructionseparation.php)
3. Exceptions                                 (tests/exceptions/*)
4. Classes and Objects                        (tests/oo/*, tests/basicdatatypes/compound/object/*)
5. Resources                                  (no test file)
6. Callback                                   (tests/basicdatatypes/callback/callback.php)
7. Heredoc                                    (tests/basicsdatatypes/scalar/string/heredoc.php)
8. Nowdoc                                     (tests/basicsdatatypes/scalar/string/nowdoc.php)
9. Type Juggling                              (tests/basicdatatypes/typejuggling.php)
10. InternalFunction                          (tests/variables/varmanage/isset.php, tests/varmanage/empty.php, tests/include.php)
11. Unset                                     (tests/variables/varmanage/unset.php)
12. Use of $GLOBALS and variable scope        (tests/variables/varscope/globals*)
13. Superglobals                              (no test file)
14. DeclareGlobal                             (tests/variables/varscope/global.php)
15. define function for constants             (tests/variables/constantvar2.php)
16. Constant variables                        (tests/constantvar.php)
17. DeclareStatic not implemented             (tests/varscope/static.php)
18. Recursive functions with static variables (tests/functions/countTo10.php)
19. Short-circuiting                          (no test file)
20. Declare                                   (tests/declare.php)
21. ListAssign                                (tests/controlstruct/whilebreak.php)
22. Foreach                                   (tests/controlstruct/foreach.php)
23. Switch                                    (tests/controlstruct/switch.php)
24. FunctionDeclRef                           (tests/functions/funretref.php)
25. function with default parameter           (tests/functions/fundefaultpar.php)
26. conditional functions                     (tests/functions/funconditional.php)


Usage and Graph Generation
--------------------------

Notes on the language
---------------------
PHP 5 is a high-order language.

.Useful functions
* varmanage functions (tests/varmanage/*)
* var_dump (tests/basicdatatypes/scalar/boolean/boolcheck.php)
* gettype  (tests/basicdatatypes/gettype.php)
* error_reporting(E_ALL);
* ini_set('display_errors', true);
* ini_set('html_errors', false);
* settype()
* function_exists()

